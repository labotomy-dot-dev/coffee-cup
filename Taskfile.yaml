version: 3

vars:
  REPO_PATH:
    sh: git rev-parse --show-toplevel

env:
  WORKLOAD_CLUSTER_NAME: "coffee-cup"
  REPO_PATH: "{{.REPO_PATH}}"
  MANIFESTS_BASE_PATH: "{{.REPO_PATH}}/gitops/platform/manifests/generated"
  REGISTRY: "ghcr.io/labotomy-dot-dev"
  DEFAULT_APP: "coffee-cup"
  DEFAULT_ENV: "dev"

tasks:
  ##########################
  # Build & Push
  ##########################
  build:
    desc: build container image for given app/env
    vars:
      APP: "{{.APP | default .DEFAULT_APP}}"
      ENV: "{{.ENV | default .DEFAULT_ENV}}"
    dir: ./products/{{.APP}}/src
    cmds:
      - |
        echo "ðŸ”§ Building {{.APP}} for {{.ENV}}..."
        docker build -t {{.REGISTRY}}/{{.APP}}:latest .
        docker tag {{.REGISTRY}}/{{.APP}}:latest {{.REGISTRY}}/{{.APP}}:{{.ENV}}

  push:
    desc: push container image for given app/env
    vars:
      APP: "{{.APP | default .DEFAULT_APP}}"
      ENV: "{{.ENV | default .DEFAULT_ENV}}"
    cmds:
      - |
        echo "ðŸš€ Pushing {{.APP}} for {{.ENV}}..."
        echo "$GITHUB_TOKEN" | docker login ghcr.io -u labotomy-dot-dev --password-stdin
        docker push {{.REGISTRY}}/{{.APP}}:latest
        docker push {{.REGISTRY}}/{{.APP}}:{{.ENV}}
  ##########################
  # Cluster Management
  ##########################
  cluster.kubecontext:
    desc: select kubernetes kubecontext
    cmds:
      - kubectl config use-context kind-$WORKLOAD_CLUSTER_NAME
  cluster.up:
    desc: prepare the cluster
    cmds:
      - task: cluster.create
      - task: cluster.kubecontext
  cluster.create:
    desc: create kind cluster
    cmds:
      - |
        K8S_CLUSTERS=$(kind get clusters)
        for element in "${K8S_CLUSTERS[@]}"; do
          if [[ $element =~ $WORKLOAD_CLUSTER_NAME ]]; then
              echo "k8s cluster already exists, skipping cluster creation."
          else
              echo "Creating k8s cluster with name: $WORKLOAD_CLUSTER_NAME"
              kind create cluster --config cluster.yaml --name $WORKLOAD_CLUSTER_NAME
          fi
        done
  ##########################
  # Ingress Management
  ##########################
  ingress.up:
    desc: install ingress nginx -> https://github.com/kubernetes/ingress-nginx/tree/main/charts/ingress-nginx
    silent: true
    cmds:
      - task: cluster.kubecontext
      - helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
      - helm repo update ingress-nginx
      - kubectl get ns ingress-nginx || kubectl create ns ingress-nginx
      - helm -n ingress-nginx upgrade --install ingress-nginx ingress-nginx/ingress-nginx -f ingress-nginx.yaml --version 4.13.3 --wait
  ##########################
  # Render Manifests
  ##########################
  render:
    desc: render K8s manifests for given environment
    vars:
      ENV: "{{.ENV | default .DEFAULT_ENV}}"
    cmds:
      - |
        echo "ðŸ§© Rendering manifests for {{.ENV}}..."
        MANIFESTS_PATH="$MANIFESTS_BASE_PATH/{{.ENV}}"
        rm -rf $MANIFESTS_PATH
        helmfile -f ./helmfile.yaml template -e {{.ENV}} --output-dir-template $MANIFESTS_PATH/{{.Release.Name}}
  ##########################
  # ArgoCD Management
  ##########################
  argocd.deploy.projects:
    desc: deploy projects to argocd
    cmds:
      - kubectl apply -f gitops/platform/projects
  argocd.deploy.apps:
    desc: deploy apps to argocd
    cmds:
      - kubectl apply -f gitops/platform/apps/app_of_apps --recursive
  argocd.notification.secret:
    desc: configure notification controller secret
    cmds:
      - |
        # fail if GITHUB_TOKEN is not set
        : "${GITHUB_TOKEN:?GITHUB_TOKEN environment variable is required}"

        kubectl create secret generic argocd-notifications-secret \
          -n argocd \
          --from-literal=github_token=$GITHUB_TOKEN
  argocd.up:
    desc: Install argo cd in kubernetes cluster
    silent: true
    # Helm chart is here https://github.com/argoproj/argo-helm/tree/main/charts/argo-cd
    cmds:
      - task: cluster.kubecontext
      #- task: argocd.notification.secret
      - helm repo add argo https://argoproj.github.io/argo-helm
      - helm repo update argo
      - kubectl get ns argocd || kubectl create ns argocd
      - helm -n argocd upgrade --install argocd argo/argo-cd -f argocd.yaml --version 8.6.0 --wait
  argocd.port-forward:
    desc: port-forward argocd service to localhost:8080
    cmds:
      - kubectl -n argocd port-forward service/argocd-server 8080:80
  argocd.admin.password:
    desc: print argocd admin password
    silent: true
    cmds:
      - |
        echo "### admin password ###"
        kubectl -n argocd get secret argocd-initial-admin-secret \
          -o jsonpath="{.data.password}" | base64 -d && echo
  argocd.accounts.passwords:
    desc: create password for example accounts
    cmds:
      - |
        kubectl patch secret argocd-secret -n argocd --type merge -p '{
          "stringData": {
            "accounts.platform.password": "$2a$10$ZAOa9qsLl8.erTepdjLrR.h6qUSFa/kXS7X0WA79eoAfg3me/u/WC",
            "accounts.developer.password": "$2a$10$ZAOa9qsLl8.erTepdjLrR.h6qUSFa/kXS7X0WA79eoAfg3me/u/WC",
            "accounts.team_lead.password": "$2a$10$ZAOa9qsLl8.erTepdjLrR.h6qUSFa/kXS7X0WA79eoAfg3me/u/WC"
          }
        }'
        kubectl rollout restart deployment argocd-server -n argocd
  ##########################
  # Combined / Meta Tasks
  ##########################
  dev.up:
    desc: build & deploy to dev
    cmds:
      - task: build.dev
      - task: push.dev
      #- task: deploy.dev.kubectl
      - task: deploy.dev.argocd
  prod.up:
    desc: build & deploy to prod
    cmds:
      - task: build.dev
      - task: push.prod
      #- task: deploy.prod.kubectl
      - task: deploy.dev.argocd
  lab.info:
    desc: print lab info
    silent: true
    cmds:
      - |
        echo "######################### lab info #############################"
        echo "- lab is up and running"
        echo "- wait for nginx-ingress & argocd to get up"
        echo "- add ip address of your machine to /etc/hosts with argocd.labotomy.dev hostname to be able to access argocd ui directly or use port-forwarding"
        echo "- port-forwarding: kubectl -n argocd port-forward service/argocd-server 8080:80"
        echo "- argocd default user is admin"
        echo "- hit 'task argocd.admin.password' to get the password"
        echo "######################### lab info #############################"

  lab.up:
    desc: bring the whole lab up
    cmds:
      - task: cluster.up
      - task: ingress.up
      - task: argocd.up
      - task: argocd.accounts.passwords
      - task: argocd.deploy.projects
      - task: argocd.deploy.apps
      - task: lab.info