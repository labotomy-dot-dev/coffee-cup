version: 3

env:
  WORKLOAD_CLUSTER_NAME: "coffee-cup"

tasks:
  build.dev:
    desc: build container image for dev environment
    cmds:
      - docker build -t ghcr.io/labotomy-dot-dev/coffee-cup:latest ./src
      - docker tag ghcr.io/labotomy-dot-dev/coffee-cup:latest ghcr.io/labotomy-dot-dev/coffee-cup:dev
  build.prod:
    desc: build container image for prod environment
    cmds:
      - docker build -t ghcr.io/labotomy-dot-dev/coffee-cup:latest ./src
      - docker tag ghcr.io/labotomy-dot-dev/coffee-cup:latest ghcr.io/labotomy-dot-dev/coffee-cup:prod
  push.dev:
    desc: push dev container image
    cmds:
      - echo "$GITHUB_TOKEN" | docker login ghcr.io -u labotomy-dot-dev --password-stdin
      - docker push ghcr.io/labotomy-dot-dev/coffee-cup:latest
      - docker push ghcr.io/labotomy-dot-dev/coffee-cup:dev
  push.prod:
    desc: push prod container image
    cmds:
      - echo "$GITHUB_TOKEN" | docker login ghcr.io -u labotomy-dot-dev --password-stdin
      - docker push ghcr.io/labotomy-dot-dev/coffee-cup:latest
      - docker push ghcr.io/labotomy-dot-dev/coffee-cup:prod
  deploy.dev.kubectl:
    desc: deploy to dev
    cmds:
      - kubectl get ns dev || kubectl create ns dev
      - kubectl apply -f deploy/dev/deploy.yaml
  deploy.prod.kubectl:
    desc: deploy to prod
    cmds:
      - kubectl get ns prod || kubectl create ns prod
      - kubectl apply -f deploy/prod/deploy.yaml
  deploy.prod.argocd:
    desc: deploy prod to argocd
    cmds:
      - kubectl apply -f argocd/app-prod.yaml
  deploy.dev.argocd:
    desc: deploy dev to argocd
    cmds:
      - kubectl apply -f argocd/app-dev.yaml
  dev.up:
    desc: build & deploy to dev
    cmds:
      - task: build.dev
      - task: push.dev
      #- task: deploy.dev.kubectl
      - task: deploy.dev.argocd
  prod.up:
    desc: build & deploy to prod
    cmds:
      - task: build.dev
      - task: push.prod
      #- task: deploy.prod.kubectl
      - task: deploy.dev.argocd
  kubecontext:
    desc: select kubernetes kubecontext
    cmds:
      - kubectl config use-context kind-$WORKLOAD_CLUSTER_NAME
  cluster.create:
    desc: create kind cluster
    cmds:
      - |
        K8S_CLUSTERS=$(kind get clusters)
        for element in "${K8S_CLUSTERS[@]}"; do
          if [[ $element =~ $WORKLOAD_CLUSTER_NAME ]]; then
              echo "k8s cluster already exists, skipping cluster creation."
          else
              echo "Creating k8s cluster with name: $WORKLOAD_CLUSTER_NAME"
              kind create cluster --config cluster.yaml --name $WORKLOAD_CLUSTER_NAME
          fi
        done
  ingress.up:
    desc: install ingress nginx -> https://github.com/kubernetes/ingress-nginx/tree/main/charts/ingress-nginx
    cmds:
      - helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
      - helm repo update
      - kubectl get ns ingress-nginx || kubectl create ns ingress-nginx
      - helm -n ingress-nginx upgrade --install ingress-nginx ingress-nginx/ingress-nginx -f ingress-nginx.yaml --version 4.13.3
  argocd.up:
    desc: Install argo cd in kubernetes cluster
    # Helm chart is here https://github.com/argoproj/argo-helm/tree/main/charts/argo-cd
    cmds:
      - helm repo add argo https://argoproj.github.io/argo-helm
      - helm repo update
      - kubectl get ns argocd || kubectl create ns argocd
      - helm -n argocd upgrade --install argocd argo/argo-cd -f argocd.yaml --version 8.6.0
  cluster.up:
    desc: prepare the cluster
    cmds:
      - task: cluster.create
      - task: kubecontext
  argocd.admin.password:
    desc: print argocd admin password
    cmds:
      - |
        echo "######################### admin password #############################"
        kubectl -n argocd get secret argocd-initial-admin-secret \
          -o jsonpath="{.data.password}" | base64 -d && echo
        echo "######################################################################"
  lab.up:
    desc: bring the whole lab up
    cmds:
      - task: cluster.up
      - task: ingress.up
      - task: argocd.up
      - task: deploy.dev.argocd
      - task: deploy.dev.argocd
      - task: echo "######################################################"