version: 3

vars:
  REPO_PATH:
    sh: git rev-parse --show-toplevel

env:
  WORKLOAD_CLUSTER_NAME: "coffee-cup"
  REPO_PATH: "{{.REPO_PATH}}"
  MANIFESTS_BASE_PATH: "{{.REPO_PATH}}/gitops/platform/manifests/generated"

tasks:
  build.dev:
    desc: build container image for dev environment
    dir: ./products/coffee-cup/src
    cmds:
      - docker build -t ghcr.io/labotomy-dot-dev/coffee-cup:latest .
      - docker tag ghcr.io/labotomy-dot-dev/coffee-cup:latest ghcr.io/labotomy-dot-dev/coffee-cup:dev
  build.prod:
    desc: build container image for prod environment
    dir: ./products/coffee-cup/src
    cmds:
      - docker build -t ghcr.io/labotomy-dot-dev/coffee-cup:latest .
      - docker tag ghcr.io/labotomy-dot-dev/coffee-cup:latest ghcr.io/labotomy-dot-dev/coffee-cup:prod
  push.dev:
    desc: push dev container image
    cmds:
      - echo "$GITHUB_TOKEN" | docker login ghcr.io -u labotomy-dot-dev --password-stdin
      - docker push ghcr.io/labotomy-dot-dev/coffee-cup:latest
      - docker push ghcr.io/labotomy-dot-dev/coffee-cup:dev
  push.prod:
    desc: push prod container image
    cmds:
      - echo "$GITHUB_TOKEN" | docker login ghcr.io -u labotomy-dot-dev --password-stdin
      - docker push ghcr.io/labotomy-dot-dev/coffee-cup:latest
      - docker push ghcr.io/labotomy-dot-dev/coffee-cup:prod
  deploy.dev.kubectl:
    desc: deploy to dev
    cmds:
      - kubectl get ns dev || kubectl create ns dev
      - kubectl apply -f deploy/dev/deploy.yaml
  deploy.prod.kubectl:
    desc: deploy to prod
    cmds:
      - kubectl get ns prod || kubectl create ns prod
      - kubectl apply -f deploy/prod/deploy.yaml
  deploy.argocd.projects:
    desc: deploy projects to argocd
    cmds:
      - kubectl apply -f gitops/platform/projects
  deploy.argocd.apps:
    desc: deploy apps to argocd
    cmds:
      - kubectl apply -f gitops/products/apps --recursive
      - kubectl apply -f gitops/platform/apps --recursive
  dev.up:
    desc: build & deploy to dev
    cmds:
      - task: build.dev
      - task: push.dev
      #- task: deploy.dev.kubectl
      - task: deploy.dev.argocd
  prod.up:
    desc: build & deploy to prod
    cmds:
      - task: build.dev
      - task: push.prod
      #- task: deploy.prod.kubectl
      - task: deploy.dev.argocd
  kubecontext:
    desc: select kubernetes kubecontext
    cmds:
      - kubectl config use-context kind-$WORKLOAD_CLUSTER_NAME
  cluster.create:
    desc: create kind cluster
    cmds:
      - |
        K8S_CLUSTERS=$(kind get clusters)
        for element in "${K8S_CLUSTERS[@]}"; do
          if [[ $element =~ $WORKLOAD_CLUSTER_NAME ]]; then
              echo "k8s cluster already exists, skipping cluster creation."
          else
              echo "Creating k8s cluster with name: $WORKLOAD_CLUSTER_NAME"
              kind create cluster --config cluster.yaml --name $WORKLOAD_CLUSTER_NAME
          fi
        done
  ingress.up:
    desc: install ingress nginx -> https://github.com/kubernetes/ingress-nginx/tree/main/charts/ingress-nginx
    silent: true
    cmds:
      - helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
      - helm repo update ingress-nginx
      - kubectl get ns ingress-nginx || kubectl create ns ingress-nginx
      - helm -n ingress-nginx upgrade --install ingress-nginx ingress-nginx/ingress-nginx -f ingress-nginx.yaml --version 4.13.3 --wait
  argocd.up:
    desc: Install argo cd in kubernetes cluster
    silent: true
    # Helm chart is here https://github.com/argoproj/argo-helm/tree/main/charts/argo-cd
    cmds:
      - helm repo add argo https://argoproj.github.io/argo-helm
      - helm repo update argo
      - kubectl get ns argocd || kubectl create ns argocd
      - helm -n argocd upgrade --install argocd argo/argo-cd -f argocd.yaml --version 8.6.0 --wait
  cluster.up:
    desc: prepare the cluster
    cmds:
      - task: cluster.create
      - task: kubecontext
  argocd.admin.password:
    desc: print argocd admin password
    silent: true
    cmds:
      - |
        echo "### admin password ###"
        kubectl -n argocd get secret argocd-initial-admin-secret \
          -o jsonpath="{.data.password}" | base64 -d && echo
  argocd.accounts.passwords:
    desc: create password for example accounts
    cmds:
      - |
        kubectl patch secret argocd-secret -n argocd --type merge -p '{
          "stringData": {
            "accounts.platform.password": "$2a$10$ZAOa9qsLl8.erTepdjLrR.h6qUSFa/kXS7X0WA79eoAfg3me/u/WC",
            "accounts.developer.password": "$2a$10$ZAOa9qsLl8.erTepdjLrR.h6qUSFa/kXS7X0WA79eoAfg3me/u/WC",
            "accounts.team_lead.password": "$2a$10$ZAOa9qsLl8.erTepdjLrR.h6qUSFa/kXS7X0WA79eoAfg3me/u/WC"
          }
        }'
        kubectl rollout restart deployment argocd-server -n argocd
  render.cmd.dev:
    desc: renders k8s manifests for dev
    cmds:
      - |
        MANIFESTS_PATH="$MANIFESTS_BASE_PATH/dev"
        echo "$MANIFESTS_PATH"
        rm -rf $MANIFESTS_PATH
        # use helmfile --debug to print more info
        helmfile -f ./helmfile.yaml template -e dev --output-dir-template $MANIFESTS_PATH/{{.Release.Name}}
  render.cmd.prod:
    desc: renders k8s manifests for prod
    cmds:
      - |
        MANIFESTS_PATH="$MANIFESTS_BASE_PATH/prod"
        echo "$MANIFESTS_PATH"
        rm -rf $MANIFESTS_PATH
        # use helmfile --debug to print more info
        helmfile -f ./helmfile.yaml template -e prod --output-dir-template $MANIFESTS_PATH/{{.Release.Name}}
  lab.info:
    desc: print lab info
    silent: true
    cmds:
      - |
        echo "######################### lab info #############################"
        echo "- lab is up and running"
        echo "- wait for nginx-ingress & argocd to get up"
        echo "- add ip address of your machine to /etc/hosts with argocd.labotomy.dev hostname to be able to access argocd ui directly or use port-forwarding"
        echo "- port-forwarding: kubectl -n argocd port-forward service/argocd-server 8080:80"
        echo "- argocd default user is admin"
        echo "- hit 'task argocd.admin.password' to get the password"
        echo "######################### lab info #############################"

  lab.up:
    desc: bring the whole lab up
    cmds:
      - task: cluster.up
      - task: ingress.up
      - task: argocd.up
      - task: deploy.dev.argocd
      - task: deploy.prod.argocd
      - task: argocd.accounts.passwords
      - task: deploy.argocd.projects
      - task: deploy.argocd.apps
      - task: lab.info