# check for more examples here https://github.com/argoproj/argo-helm/tree/main/charts/argo-cd
global:
  domain: argocd.labotomy.dev

configs:
  secret:
    argocdServerAdminPassword: "$2a$10$ZAOa9qsLl8.erTepdjLrR.h6qUSFa/kXS7X0WA79eoAfg3me/u/WC"

  params:
    server.insecure: true
  cm:
    # Enable local users
    admin.enabled: "true"
    accounts.platform: login
    accounts.developer: login
    accounts.team_lead: login
    # -- Timeout to discover if a new manifests version got published to the repository
    timeout.reconciliation: 60s

    # enable exec into pods
    exec.enabled: true

  rbac:
    policy.default: role:readonly

    policy.csv: |
      ########## PLATFORM ROLE ##########
      # Platform can manage Argo CD itself and view everything
      p, role:platform, clusters, *, *, allow
      p, role:platform, repositories, *, *, allow
      p, role:platform, projects, get, *, allow
      p, role:platform, applications, get, *, allow
      p, role:platform, accounts, *, *, allow
      p, role:platform, settings, *, *, allow

      # Exec / port-forward
      p, role:platform, exec, create, dev/*, allow
      p, role:platform, port-forward, create, dev/*, allow
      p, role:platform, exec, create, prod/*, allow
      p, role:platform, port-forward, create, prod/*, allow

      ########## DEVELOPER ROLE ##########
      # Full access to dev project
      p, role:developer, applications, get, dev/*, allow
      p, role:developer, applications, sync, dev/*, allow
      p, role:developer, applications, create, dev/*, allow
      p, role:developer, applications, delete, dev/*, allow
      p, role:developer, projects, get, dev, allow
      p, role:developer, clusters, get, *, allow

      # Exec / port-forward
      p, role:developer, exec, create, dev/*, allow
      p, role:developer, port-forward, create, dev/*, allow

      # Read-only access to prod project
      p, role:developer, applications, get, prod/*, allow
      p, role:developer, projects, get, prod, allow

      ########## TEAM LEAD ROLE ##########
      # Full access to dev project
      p, role:team_lead, applications, get, dev/*, allow
      p, role:team_lead, applications, sync, dev/*, allow
      p, role:team_lead, applications, create, dev/*, allow
      p, role:team_lead, applications, delete, dev/*, allow
      p, role:team_lead, projects, get, dev, allow

      # Exec / port-forward
      p, role:team_lead, exec, create, dev/*, allow
      p, role:team_lead, port-forward, create, dev/*, allow
      p, role:team_lead, exec, create, prod/*, allow
      p, role:team_lead, port-forward, create, prod/*, allow

      # Full access to prod project
      p, role:team_lead, applications, get, prod/*, allow
      p, role:team_lead, applications, sync, prod/*, allow
      p, role:team_lead, applications, create, prod/*, allow
      p, role:team_lead, applications, delete, prod/*, allow
      p, role:team_lead, projects, get, prod, allow
      p, role:team_lead, clusters, exec, dev/*, allow
      p, role:team_lead, clusters, exec, prod/*, allow
      p, role:team_lead, clusters, port-forward, dev/*, allow
      p, role:team_lead, clusters, port-forward, prod/*, allow

      # Access to clusters
      p, role:team_lead, clusters, get, *, allow

      ########## USER TO ROLE BINDINGS ##########
      g, platform, role:platform
      g, developer, role:developer
      g, team_lead, role:team_lead

server:
  ingress:
    enabled: true
    ingressClassName: nginx
    annotations:
      nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
      nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
    extraTls:
      - hosts:
          - argocd.labotomy.dev
        # Based on the ingress controller used secret might be optional
        # if secret is missing, nginx will provide a default certificate
        secretName: wildcard-tls

redis-ha:
  enabled: false

## Notifications controller
notifications:
  enabled: true
  # you'll have to create secret manually
  secret:
    create: false
  argocdUrl: "https://argocd.labotomy.dev"
  extraArgs:
    - --loglevel=debug
  # # 1. Define the webhook service
  notifiers:
    # service.webhook.github: |
    #   url: https://api.github.com/repos/labotomy-dot-dev/coffee-cup/dispatches
    #   method: POST
    #   headers:
    #     Authorization: Bearer $GITHUB_TOKEN
    #     Accept: application/vnd.github+json
    service.webhook.github: |
      url: https://api.github.com/repos/labotomy-dot-dev/coffee-cup/dispatches
      method: POST
      headers:
        - name: Authorization
          value: Bearer $github_token
        - name: Accept
          value: application/vnd.github+json
  # 2. Define triggers
  triggers:
    trigger.on-sync-succeeded: |
      - description: Application has finished deploying dev image
        oncePer: app.status.sync.revision
        send:
          - github-app-sync-succeeded
        when: |
          app.spec.project in ['dev', 'prod'] &&
          app.status.operationState.phase in ['Succeeded'] &&
          app.status.health.status == 'Healthy'
    trigger.on-sync-failed: |
      - description: Application syncing has failed
        oncePer: app.status.sync.revision
        send:
          - github-app-sync-failed
        when: |
          app.spec.project in ['dev', 'prod'] &&
          app.status.operationState.phase in ['Succeeded'] &&
          app.status.health.status != 'Healthy'
        when: |
          app.status.operationState.phase in ['Error', 'Failed']
  # 3. Define templates
  templates:
    template.github-app-sync-failed: |
      webhook:
        github:
          method: POST
          url: https://api.github.com/repos/labotomy-dot-dev/coffee-cup/dispatches
          headers:
            Authorization: Bearer $github_token
            Accept: application/vnd.github+json
          body: |
            {
              "event_type": "argocd-sync-failed",
              "client_payload": {
                "app": "{{.app.metadata.name}}",
                "project": "{{.app.spec.project}}",
                "revision": "{{.app.status.sync.revision}}",
                "images": {{ toJson .app.status.images }}
              }
            }
    template.github-app-sync-succeeded: |
      webhook:
        github:
          method: POST
          url: https://api.github.com/repos/labotomy-dot-dev/coffee-cup/dispatches
          headers:
            Authorization: Bearer $github_token
            Accept: application/vnd.github+json
          body: |
            {
              "event_type": "argocd-sync-succeeded",
              "client_payload": {
                "app": "{{.app.metadata.name}}",
                "project": "{{.app.spec.project}}",
                "revision": "{{.app.status.sync.revision}}",
                "images": {{ toJson .app.status.summary.images }}
              }
            }
  # 4. Define subscriptions
  subscriptions:
    - recipients:
        - github
      triggers:
        - on-sync-succeeded
        - on-sync-failed
