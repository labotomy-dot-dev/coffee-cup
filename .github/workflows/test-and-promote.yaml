name: Test and Promote After ArgoCD Sync

on:
  repository_dispatch:
    types: [argocd-sync-succeeded]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  debug:
    name: Print ArgoCD webhook payload
    runs-on: ubuntu-latest
    steps:
      - name: Print payload
        run: |
          echo "Event type: ${{ github.event.action || github.event_name }}"
          echo "Payload: ${{ toJson(github.event.client_payload) }}"
  test-in-cluster:
    # ✅ Run only if app name from ArgoCD payload ends with "-dev"
    if: endsWith(github.event.client_payload.app, '-dev')
    runs-on: ubuntu-latest
    outputs:
      app_base: ${{ steps.normalize.outputs.app_base }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Print ArgoCD webhook payload
        run: |
          echo "App: ${{ github.event.client_payload.app }}"
          echo "Project: ${{ github.event.client_payload.project }}"
          echo "Revision: ${{ github.event.client_payload.revision }}"
          echo "Images: ${{ toJson(github.event.client_payload.images) }}"
          echo "✅ Argo CD finished syncing successfully!"

      - name: Normalize app name
        id: normalize
        shell: bash
        run: |
          ARGO_APP="${{ github.event.client_payload.app }}"
          APP_BASE=$(echo "$ARGO_APP" | sed -E 's/-[^-]+$//')
          echo "Normalized app name: $APP_BASE"
          echo "app_base=$APP_BASE" >> $GITHUB_OUTPUT

      - name: Run integration tests in cluster
        shell: bash
        run: |
          APP_BASE="${{ steps.normalize.outputs.app_base }}"
          echo "Running integration tests for app $APP_BASE in dev cluster..."
          # Example:
          # kubectl -n dev rollout status deploy/$APP_BASE
          # pytest tests/integration/$APP_BASE/
  promote-prod:
    name: Promote to production
    runs-on: ubuntu-latest
    needs: test-in-cluster
    if: success()
    permissions:
      contents: write
      packages: write
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install yq
        run: |
          sudo wget -qO /usr/local/bin/yq \
            https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq

      - name: Extract dev and prod images from manifests
        id: extract-images
        run: |
          APP_BASE="${{ needs.test-in-cluster.outputs.app_base }}"
          DEV_MANIFEST="products/$APP_BASE/deploy/dev/deploy.yaml"
          PROD_MANIFEST="products/$APP_BASE/deploy/prod/deploy.yaml"

          if [ ! -f "$DEV_MANIFEST" ]; then
            echo "❌ Dev manifest not found at $DEV_MANIFEST"
            exit 1
          fi

          if [ ! -f "$PROD_MANIFEST" ]; then
            echo "❌ Prod manifest not found at $PROD_MANIFEST"
            exit 1
          fi

          DEV_IMAGE=$(yq -r '.spec.template.spec.containers[0].image' "$DEV_MANIFEST")
          PROD_IMAGE=$(yq -r '.spec.template.spec.containers[0].image' "$PROD_MANIFEST")

          echo "DEV_IMAGE=$DEV_IMAGE"
          echo "PROD_IMAGE=$PROD_IMAGE"

          echo "DEV_IMAGE=$DEV_IMAGE" >> $GITHUB_ENV
          echo "PROD_IMAGE=$PROD_IMAGE" >> $GITHUB_ENV

      - name: Check if promotion is needed
        run: |
          DEV_TAG="${DEV_IMAGE##*:}"
          PROD_TAG="${PROD_IMAGE##*:}"

          DEV_VERSION="${DEV_TAG#*-}"
          PROD_VERSION="${PROD_TAG#*-}"

          echo "DEV_TAG=$DEV_TAG"
          echo "PROD_TAG=$PROD_TAG"
          echo "DEV_VERSION=$DEV_VERSION"
          echo "PROD_VERSION=$PROD_VERSION"

          if [ "$DEV_VERSION" = "$PROD_VERSION" ]; then
            echo "Tags refer to the same version ($DEV_VERSION). Skipping promotion."
            echo "PROMOTE=false" >> $GITHUB_ENV
          else
            echo "New dev version detected ($DEV_VERSION vs $PROD_VERSION). Promotion needed."
            echo "PROMOTE=true" >> $GITHUB_ENV
          fi

      - name: Log in to GitHub Container Registry
        if: env.PROMOTE == 'true'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Promote dev image to prod
        if: env.PROMOTE == 'true'
        run: |
          APP_BASE="${{ needs.test-in-cluster.outputs.app_base }}"

          # Paths
          DEV_MANIFEST="products/$APP_BASE/deploy/dev/deploy.yaml"
          PROD_MANIFEST="products/$APP_BASE/deploy/prod/deploy.yaml"

          # Extract dev image
          DEV_IMAGE=$(yq e -r '.spec.template.spec.containers[0].image' "$DEV_MANIFEST")
          echo "DEV_IMAGE=$DEV_IMAGE"

          # Compute corresponding prod image
          PROD_IMAGE="${DEV_IMAGE/:dev-/:prod-}"
          echo "PROD_IMAGE=$PROD_IMAGE"

          echo "Promoting $DEV_IMAGE -> $PROD_IMAGE"

          # Push to registry
          docker pull "$DEV_IMAGE"
          docker tag "$DEV_IMAGE" "$PROD_IMAGE"
          docker push "$PROD_IMAGE"
          docker image ls

          # Update prod manifest
          if [ ! -f "$PROD_MANIFEST" ]; then
            echo "❌ Prod manifest not found at $PROD_MANIFEST"
            exit 1
          fi

          echo "Updating production manifest to use promoted image..."
          yq e -i ".spec.template.spec.containers[0].image = \"$PROD_IMAGE\"" "$PROD_MANIFEST"

          # Commit and push changes
          git pull origin main
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git add "$PROD_MANIFEST"
          git commit -m "Promote $APP_BASE to prod [skip ci]" || echo "No changes to commit"
          git push
